SHELL 			:= /bin/bash

target	= run_avr

SIMAVR		:= ./sim
CFLAGS		+= -O2 -Wall -Wextra -Wno-unused-parameter -Werror \
			-Wno-unused-result -Wno-missing-field-initializers \
			-Wno-sign-compare -g -fPIC -DHAVE_LIBELF=1 
CORE_CFLAGS	= -DAVR_CORE=1
CPPFLAGS	+= --std=gnu99 -Wall
CPPFLAGS	+= ${patsubst %,-I%,${subst :, ,${IPATH}}}
AVR_CPPFLAGS	= ${CPPFLAGS} -I${SIMAVR}/cores
CC 		?= clang
AR 		?= ar
RANLIB 		?= ranlib
MKDIR		?= mkdir -p
SHELL	 	:= ${shell which bash}
OBJ 		:= obj-${shell $(CC) -dumpmachine}
LIBDIR		:= $(OBJ)
LDFLAGS 	+= -L${LIBDIR} -lsimavr -lm -lelf
LFLAGS		+= -Wl,-rpath,${LIBDIR}
VPATH	:= cores sim
IPATH	:= sim . ../../shared
cores	:= ${wildcard cores/*.c}
sim		:= ${wildcard sim/sim_*.c} ${wildcard sim/avr_*.c}
sim_o 	:= ${patsubst sim/%.c, ${OBJ}/%.o, ${sim}}


all:
	$(MAKE) obj config
	$(MAKE) libsimavr ${target}


${OBJ}/sim_%.o : cores/sim_%.c | ${OBJ}
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CORE_CFLAGS) -MMD ${AVR_CPPFLAGS} $<  -c -o $@

${OBJ}/%.o: %.c | ${OBJ}
	$(CC) $(CPPFLAGS) $(CFLAGS) -MMD $< -c -o $@

${OBJ}/%.elf:
	$(CC) -MMD ${CFLAGS}  ${LFLAGS} -o $@ ${filter %.o,$^} $(LDFLAGS)


.PRECIOUS: ${OBJ}/%.a ${OBJ}/%.so.1


${OBJ}/%.a:
	$(AR) cru $@ ${filter %.o,$^} && $(RANLIB) $@

${OBJ}/%.so.1: ${OBJ}/%.a
	$(CC) -o $@ -shared \
		-Wl,--whole-archive,-soname,${basename ${notdir $@}}.1 \
		${filter %.o %.a,$^} \
		 -Wl,--no-whole-archive \
		${filter-out -lsimavr, $(LDFLAGS)} ${EXTRA_LDFLAGS}

${OBJ}/%.so: ${OBJ}/%.so.1
	ln -sf ${notdir $<} $@

obj: 
	mkdir -p ${OBJ}

clean:
	rm -rf ${OBJ} ${target} *.a *.so *.exe sim_core_*.h


# include the dependency files generated by gcc, if any
-include ${wildcard ${OBJ}/*.d}


${OBJ}/libsimavr.a	:	${sim_o}


libsimavr	: config ${OBJ}/libsimavr.a
libsimavr	: ${OBJ}/libsimavr.so


${OBJ}/${target}.elf	: libsimavr
${OBJ}/${target}.elf	: ${OBJ}/${target}.o

${target}	: ${OBJ}/${target}.elf

	ln -sf $< $@


config: sim_core_config.h sim_core_decl.h


sim_core_config.h: $(cores) Makefile
	@echo CONF $@
	@conf=""; decl=""; array=""; \
	for core in cores/*.c ; do \
		file=$$core; global=$${core/cores\/sim_}; global=$${global/.c}; \
		upper=$$(echo $$global|tr '[a-z]' '[A-Z]'); \
		if $(CC) -E $(CFLAGS) ${AVR_CPPFLAGS} $$file \
			>>/dev/null 2>&1 ; then \
			conf+="#define CONFIG_$$upper 1\n"; \
			obj=$${file/.c/.o} ; obj=$${obj/cores\/}; \
			printf "\$${OBJ}/libsimavr.a: \$${OBJ}/$$obj\n">>${OBJ}/cores.deps ; \
		else \
			conf+="#undef CONFIG_$$upper\n"; \
			echo WARNING $$file did not compile, check your avr-gcc toolchain; \
		fi \
	done ; \
	( printf "// Autogenerated do not edit\n"; \
	  printf "#ifndef __SIM_CORE_CONFIG_H__\n#define __SIM_CORE_CONFIG_H__\n\n"; \
	  printf "$$conf\n"; \
	  printf "#endif\n"; \
	) >sim_core_config.h

#
# This take the config file that was generated, and create the static
# table of all available cores for name lookups, as well as a C
# config file
#
sim_core_decl.h: sim_core_config.h $(cores) Makefile
	@echo CONF $@
	@decl=""; array=""; \
	for core in $$(grep -r avr_kind_t cores/|awk -F '[ :]' '{print $$1 "=" $$3;}') ; do \
		file=$${core/=*}; global=$${core/*=}; \
		upper=$$global; upper=$${upper/.c}; \
		upper=$$(echo $$global|tr '[a-z]' '[A-Z]'); \
		decl+="#if CONFIG_$$upper\nextern avr_kind_t $$global;\n#endif\n"; \
		array+="#if CONFIG_$$upper\n\t&$$global,\n#endif\n"; \
	done ; \
	( printf "// Autogenerated do not edit\n"; \
	  printf "#ifndef __SIM_CORE_DECL_H__\n#define __SIM_CORE_DECL_H__\n\n"; \
	  printf "#include \"sim_core_config.h\"\n";\
	  printf "$$decl\n" ;  \
	  printf "extern avr_kind_t * avr_kind[];\n"; \
	  printf "#ifdef AVR_KIND_DECL\navr_kind_t * avr_kind[] = {\n$$array\tNULL\n};\n#endif\n"; \
	  printf "#endif\n"; \
	) >sim_core_decl.h

-include ${OBJ}/cores.deps

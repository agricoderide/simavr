# simavr directory
ifndef SIMAVR
SIMAVR		:= ${shell for p in . .. ../.. ../../..;do test -d $$p/simavr/sim && echo $$p/simavr; done}
endif

# get the first character of what the compiler says it is, unless it's 'x86_64' doh
ARCH 		:= ${shell $(CC) -dumpmachine | sed -e 's/^x/i/' -e 's/\(.\).*/\1/'}


CFLAGS		+= -O2 -Wall -Wextra -Wno-unused-parameter \
			-Wno-unused-result -Wno-missing-field-initializers \
			-Wno-sign-compare
CFLAGS		+= -g
CORE_CFLAGS	= -DAVR_CORE=1

AVR 		:= avr-
CFLAGS 		+= -fPIC


CPPFLAGS	+= --std=gnu99 -Wall
CPPFLAGS	+= ${patsubst %,-I%,${subst :, ,${IPATH}}}

AVR_CPPFLAGS	= ${CPPFLAGS} -I${SIMAVR}/cores

CC 		?= clang
AR 		?= ar
RANLIB 		?= ranlib
MKDIR		?= mkdir -p
INSTALL		?= install
SHELL	 	:= ${shell which bash}

OBJ 		:= obj-${shell $(CC) -dumpmachine}
LIBDIR		:= ${shell pwd}/${SIMAVR}/${OBJ}
LDFLAGS 	+= -L${LIBDIR} -lsimavr -lm

# Are libelf and/or libdwarf installed?
C_LIBELF	:= ${shell pkg-config --cflags \
			libelf 2>/dev/null && \
			echo -DHAVE_LIBELF=1 }
LD_LIBELF	:= ${shell pkg-config --libs libelf }

C_LIBDWARF	:= ${shell ls /usr/include/libdwarf/libdwarf.h >/dev/null 2>&1 && \
			echo -DHAVE_LIBDWARF=1 }
LD_LIBDWARF	:= ${shell ls /usr/include/libdwarf/libdwarf.h >/dev/null 2>&1 && \
			echo -ldwarf}

CFLAGS		+= $(C_LIBELF) $(C_LIBDWARF)
LDFLAGS		+= $(LD_LIBELF) $(LD_LIBDWARF)


# for clock_gettime on RHEL 6.X
ifneq ("$(wildcard /usr/lib/librt.so /usr/lib64/librt.so)","")
LDFLAGS            += -lrt
endif

ifeq (${shell uname}, Linux)
ifeq ($(RELEASE),1)
# allow the shared library to be found in the build directory
# only for linking, the install time location is used at runtime
LFLAGS		+= -Wl,-rpath-link,${LIBDIR} -Wl,-rpath,${PREFIX}/lib
else
# allow the shared library to be found in the build directory
LFLAGS		+= -Wl,-rpath,${LIBDIR}
endif
endif


%.hex: %.axf
	@${AVR}objcopy -j .text -j .data -j .eeprom -O ihex ${<} ${@}

%.s: %.axf
	@${AVR}objdump -j .text -j .data -j .bss -d  ${<} > ${@}

# --mcall-prologues can be used here, but messes up debugging a little
%.axf: %.c
	${AVR}gcc -Wall -gdwarf-2 -Os -std=gnu99 \
			-mmcu=${shell v=${<} && echo $${v/_*}} \
			-DF_CPU=8000000 \
			-fno-inline-small-functions \
			-ffunction-sections -fdata-sections \
			-Wl,--relax,--gc-sections \
			-Wl,--undefined=_mmcu,--section-start=.mmcu=0x910000 \
			-I$(SIMAVR)/sim/avr -I../simavr/sim/avr -I../../simavr/sim/avr \
			${^} -o ${@}
	@${AVR}size ${@}|sed '1d'

# this rule has precedence
${OBJ}/sim_%.o : cores/sim_%.c | ${OBJ}
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CORE_CFLAGS) -MMD ${AVR_CPPFLAGS} $<  -c -o $@

${OBJ}/%.o: %.c | ${OBJ}
	$(CC) $(CPPFLAGS) $(CFLAGS) -MMD $< -c -o $@

${OBJ}/%.elf:
	$(CC) -MMD ${CFLAGS}  ${LFLAGS} -o $@ ${filter %.o,$^} $(LDFLAGS)


.PRECIOUS: ${OBJ}/%.a ${OBJ}/%.so.1
#
# Static library
#
${OBJ}/%.a:
	$(AR) cru $@ ${filter %.o,$^} && $(RANLIB) $@

#
# Shared library (Linux)
#
${OBJ}/%.so.1: ${OBJ}/%.a
	$(CC) -o $@ -shared \
		-Wl,--whole-archive,-soname,${basename ${notdir $@}}.1 \
		${filter %.o %.a,$^} \
		 -Wl,--no-whole-archive \
		${filter-out -lsimavr, $(LDFLAGS)} ${EXTRA_LDFLAGS}

${OBJ}/%.so: ${OBJ}/%.so.1
	ln -sf ${notdir $<} $@

obj: ${OBJ}

${OBJ}:
	mkdir -p ${OBJ}

clean-${OBJ}:
	rm -rf ${OBJ}

# include the dependency files generated by gcc, if any
-include ${wildcard ${OBJ}/*.d}
